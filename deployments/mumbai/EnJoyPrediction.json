{
  "address": "0xe3F324dB999000c856dc1D5413567604d7D210F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "usdtAddress",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "btcAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "reward",
          "type": "uint80"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "prediction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stakeAmount",
          "type": "uint32"
        }
      ],
      "name": "Predict",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getPlayerStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "stakeAmount",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            }
          ],
          "internalType": "struct EnJoyPrediction.StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerUnclaimReward",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "claimableReward",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getTableInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum EnJoyPrediction.TableResult",
              "name": "result",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "startPrice",
              "type": "uint64"
            },
            {
              "internalType": "uint80",
              "name": "longPool",
              "type": "uint80"
            },
            {
              "internalType": "uint80",
              "name": "shortPool",
              "type": "uint80"
            },
            {
              "internalType": "uint24",
              "name": "playerCount",
              "type": "uint24"
            }
          ],
          "internalType": "struct EnJoyPrediction.TableInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "predictLong",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "stakeAmount",
          "type": "uint32"
        }
      ],
      "name": "predict",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08bd0b06722f4a1420a5a6f4dbfca324c4070924a5c352a968cba6ee5b56576e",
  "receipt": {
    "to": null,
    "from": "0x4d3b9625656af699F53D364A980Ea78bb6035978",
    "contractAddress": "0xe3F324dB999000c856dc1D5413567604d7D210F7",
    "transactionIndex": 9,
    "gasUsed": "1325772",
    "logsBloom": "0x
    "blockHash": "0x4db5750860a9dd0ea8c99cf10ceff52ae098d071e9b4acda9045d1f962d050d4",
    "transactionHash": "0x08bd0b06722f4a1420a5a6f4dbfca324c4070924a5c352a968cba6ee5b56576e",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 29399179,
        "transactionHash": "0x08bd0b06722f4a1420a5a6f4dbfca324c4070924a5c352a968cba6ee5b56576e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000710ac85ab74000000000000000000000000000000000000000000000000001493c4e18c7a52c300000000000000000000000000000000000000000000001f7536ab4de9f43158000000000000000000000000000000000000000000000000148cb43506cedec300000000000000000000000000000000000000000000001f753dbbfa6f9fa558",
        "logIndex": 19,
        "blockHash": "0x4db5750860a9dd0ea8c99cf10ceff52ae098d071e9b4acda9045d1f962d050d4"
      }
    ],
    "blockNumber": 29399179,
    "cumulativeGasUsed": "3940881",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Dd548eeba1812b5CB3c21e019929DE0ee80385A",
    "0x007A22900a3B98143368Bd5906f8E17e9867581b"
  ],
  "numDeployments": 1,
  "solcInputHash": "00a942239b04bd10abcacf774273fa93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"btcAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"reward\",\"type\":\"uint80\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stakeAmount\",\"type\":\"uint32\"}],\"name\":\"Predict\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPlayerStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"stakeAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"}],\"internalType\":\"struct EnJoyPrediction.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerUnclaimReward\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"claimableReward\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getTableInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum EnJoyPrediction.TableResult\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"startPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint80\",\"name\":\"longPool\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"shortPool\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"playerCount\",\"type\":\"uint24\"}],\"internalType\":\"struct EnJoyPrediction.TableInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"predictLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"stakeAmount\",\"type\":\"uint32\"}],\"name\":\"predict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"InJoy Labs (https://injoylabs.io/)\",\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Claim reward given table IDs\"},\"constructor\":{\"details\":\"Connect USDT contract and BTC oracle\"},\"getPlayerStakeInfo(address,uint256)\":{\"details\":\"get current stake info of certain player\"},\"getPlayerUnclaimReward(address)\":{\"details\":\"compute unclaimed reward of certain player\"},\"getTableInfo(uint256)\":{\"details\":\"get current stake for long and short\"},\"predict(bool,uint32)\":{\"details\":\"Predict BTC price with certain amount of USDT\"},\"settle()\":{\"details\":\"Settle the result using Chainlink oracle\"}},\"stateVariables\":{\"_btcPriceFeed\":{\"details\":\"Chainlink BTC price feed oracle\"},\"_stakeInfoMapOf\":{\"details\":\"Player => (TableID => StakeInfo)\"},\"_tableInfoMap\":{\"details\":\"TableID => TableInfo\"},\"_usdt\":{\"details\":\"USDT contract\"}},\"title\":\"A game about predicting the price of BTC\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnJoyPrediction.sol\":\"EnJoyPrediction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/EnJoyPrediction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./utils/EnumerableMap.sol\\\";\\n\\n/**\\n * @author InJoy Labs (https://injoylabs.io/)\\n * @title A game about predicting the price of BTC\\n */\\ncontract EnJoyPrediction {\\n    // uint-to-uint enumerable map\\n    using EnumerableMap for EnumerableMap.U2UMap;\\n\\n    uint32 private constant MIN_STAKE = 1_000_000; // 1 USDT\\n\\n    uint32 private constant MAX_STAKE = 5_000_000; // 5 USDT\\n\\n    uint32 private constant DAY_TIME_OFFSET = 13 * 60 * 60; // 9 p.m. UTC+8\\n\\n    /// @dev Player's stake info given table\\n    struct StakeInfo {\\n        uint32 stakeAmount;\\n        uint8 prediction;\\n    }\\n\\n    /// @dev Table result state\\n    enum TableResult {\\n        NULL,\\n        LONG,\\n        SHORT,\\n        DRAW\\n    }\\n\\n    /// @dev Table's info given table ID (global storage)\\n    struct TableInfo {\\n        TableResult result;\\n        uint64 startPrice;\\n        uint80 longPool;\\n        uint80 shortPool;\\n        uint24 playerCount;\\n    }\\n\\n    event Predict(\\n        address indexed player,\\n        uint8 indexed prediction,\\n        uint32 stakeAmount\\n    );\\n\\n    event Claim(address indexed player, uint80 reward);\\n\\n    /// @dev USDT contract\\n    IERC20 private immutable _usdt;\\n\\n    /// @dev Chainlink BTC price feed oracle\\n    AggregatorV3Interface private immutable _btcPriceFeed;\\n\\n    /// @dev TableID => TableInfo\\n    mapping(uint256 => TableInfo) private _tableInfoMap;\\n\\n    /// @dev Player => (TableID => StakeInfo)\\n    mapping(address => EnumerableMap.U2UMap) private _stakeInfoMapOf;\\n\\n    /// @dev Connect USDT contract and BTC oracle\\n    constructor(IERC20 usdtAddress, AggregatorV3Interface btcAggregator) {\\n        _usdt = usdtAddress;\\n        _btcPriceFeed = btcAggregator;\\n    }\\n\\n    /**\\n     * Execution Functions\\n     * - predict\\n     * - claim\\n     * - settle\\n     */\\n\\n    /// @dev Predict BTC price with certain amount of USDT\\n    function predict(bool predictLong, uint32 stakeAmount) public {\\n        uint256 tableId = _getCurrentTableId();\\n        // checks\\n        require(\\n            stakeAmount <= MAX_STAKE && stakeAmount >= MIN_STAKE,\\n            \\\"stake out of range\\\"\\n        );\\n        require(\\n            !_stakeInfoMapOf[msg.sender].contains(tableId),\\n            \\\"already predicted\\\"\\n        );\\n\\n        // get current table info\\n        TableInfo storage tableInfo = _tableInfoMap[tableId];\\n\\n        // stake USDT to contract\\n        _usdt.transferFrom(msg.sender, address(this), stakeAmount);\\n\\n        // update table info\\n        if (predictLong) tableInfo.longPool += stakeAmount;\\n        else tableInfo.shortPool += stakeAmount;\\n\\n        // add stake info to player's profolio\\n        uint8 prediction = predictLong\\n            ? uint8(TableResult.LONG)\\n            : uint8(TableResult.SHORT);\\n        uint256 serialNumber = _serializeStakeInfo(\\n            StakeInfo(stakeAmount, prediction)\\n        );\\n        _stakeInfoMapOf[msg.sender].set(tableId, serialNumber);\\n\\n        // increase player count by one\\n        ++tableInfo.playerCount;\\n\\n        // emit Predict event\\n        emit Predict(msg.sender, prediction, stakeAmount);\\n    }\\n\\n    /// @dev Claim reward given table IDs\\n    function claim() public {\\n        EnumerableMap.U2UMap storage stakeInfoMap = _stakeInfoMapOf[msg.sender];\\n        uint256 mapSize = stakeInfoMap.length();\\n        uint80 claimableReward = 0;\\n        for (uint256 i = 0; i < mapSize; ++i) {\\n            (uint256 tableId, uint256 serialNumber) = stakeInfoMap.at(i);\\n            StakeInfo memory stakeInfo = _deserializeStakeInfo(serialNumber);\\n            TableInfo memory tableInfo = _tableInfoMap[tableId];\\n            if (tableInfo.result == TableResult.DRAW) {\\n                claimableReward += stakeInfo.stakeAmount;\\n                stakeInfoMap.remove(tableId);\\n            } else {\\n                uint80 pool = tableInfo.longPool + tableInfo.shortPool;\\n                uint80 shares = tableInfo.result == TableResult.LONG\\n                    ? tableInfo.longPool\\n                    : tableInfo.shortPool;\\n                if (stakeInfo.prediction == uint8(tableInfo.result)) {\\n                    claimableReward += (stakeInfo.stakeAmount * pool) / shares;\\n                    stakeInfoMap.remove(tableId);\\n                }\\n            }\\n        }\\n\\n        // transfer reward to player\\n        _usdt.transfer(msg.sender, (claimableReward * 99) / 100);\\n\\n        // emit Claim event\\n        emit Claim(msg.sender, claimableReward);\\n    }\\n\\n    /// @dev Settle the result using Chainlink oracle\\n    function settle() public {\\n        uint256 tableId = _getCurrentTableId();\\n        TableInfo storage stakingTableInfo = _tableInfoMap[tableId - 1];\\n        TableInfo storage waitingTableInfo = _tableInfoMap[tableId - 2];\\n\\n        // check if current table has already created\\n        require(stakingTableInfo.startPrice == 0, \\\"settle too early\\\");\\n\\n        // fetch BTC price from Chainlink oracle\\n        (, int256 price, , , ) = _btcPriceFeed.latestRoundData();\\n        uint64 currPrice = uint64(uint256(price));\\n\\n        // set the start price of current table\\n        stakingTableInfo.startPrice = currPrice;\\n\\n        // settle the result of waiting table\\n        if (waitingTableInfo.longPool == 0 || waitingTableInfo.shortPool == 0) {\\n            waitingTableInfo.result = TableResult.DRAW;\\n        } else {\\n            uint64 previousStartPrice = waitingTableInfo.startPrice;\\n            if (currPrice > previousStartPrice) {\\n                waitingTableInfo.result = TableResult.LONG;\\n            } else if (currPrice < previousStartPrice) {\\n                waitingTableInfo.result = TableResult.SHORT;\\n            } else {\\n                waitingTableInfo.result = TableResult.DRAW;\\n            }\\n        }\\n\\n        // transfer reward to settler to covering the gas fee\\n        uint80 reward = (waitingTableInfo.longPool +\\n            waitingTableInfo.longPool) / 100;\\n        _usdt.transfer(msg.sender, reward);\\n    }\\n\\n    /**\\n     * Query Functions\\n     * - getTableInfo\\n     * - getPlayerStakeInfo\\n     * - getPlayerUnclaimReward\\n     */\\n    /// @dev get current stake for long and short\\n    function getTableInfo(uint256 timestamp)\\n        public\\n        view\\n        returns (TableInfo memory)\\n    {\\n        uint256 tableId = _getTableId(timestamp);\\n        return _tableInfoMap[tableId];\\n    }\\n\\n    /// @dev get current stake info of certain player\\n    function getPlayerStakeInfo(address player, uint256 timestamp)\\n        public\\n        view\\n        returns (StakeInfo memory)\\n    {\\n        uint256 tableId = _getTableId(timestamp);\\n        (bool ifPredicted, uint256 serialNumber) = _stakeInfoMapOf[player]\\n            .tryGet(tableId);\\n        // return stake info if predicted\\n        if (ifPredicted) {\\n            return _deserializeStakeInfo(serialNumber);\\n        } else {\\n            return StakeInfo(0, 0);\\n        }\\n    }\\n\\n    /// @dev compute unclaimed reward of certain player\\n    function getPlayerUnclaimReward(address player)\\n        public\\n        view\\n        returns (uint80 claimableReward)\\n    {\\n        EnumerableMap.U2UMap storage stakeInfoMap = _stakeInfoMapOf[player];\\n        uint256 mapSize = stakeInfoMap.length();\\n        claimableReward = 0;\\n        for (uint256 i = 0; i < mapSize; ++i) {\\n            (uint256 tableId, uint256 serialNumber) = stakeInfoMap.at(i);\\n            StakeInfo memory stakeInfo = _deserializeStakeInfo(serialNumber);\\n            TableInfo memory tableInfo = _tableInfoMap[tableId];\\n            if (tableInfo.result == TableResult.DRAW) {\\n                claimableReward += stakeInfo.stakeAmount;\\n            } else {\\n                uint80 pool = tableInfo.longPool + tableInfo.shortPool;\\n                uint80 shares = tableInfo.result == TableResult.LONG\\n                    ? tableInfo.longPool\\n                    : tableInfo.shortPool;\\n                if (stakeInfo.prediction == uint8(tableInfo.result))\\n                    claimableReward += (stakeInfo.stakeAmount * pool) / shares;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /// @dev deserialize uint256 to StakeInfo struct\\n    function _deserializeStakeInfo(uint256 serialNumber)\\n        private\\n        pure\\n        returns (StakeInfo memory stakeInfo)\\n    {\\n        stakeInfo.prediction = uint8(serialNumber);\\n        serialNumber >>= 8;\\n        stakeInfo.stakeAmount = uint32(serialNumber);\\n    }\\n\\n    /// @dev serialize StakeInfo struct into uint256\\n    function _serializeStakeInfo(StakeInfo memory stakeInfo)\\n        private\\n        pure\\n        returns (uint256 serialNumber)\\n    {\\n        serialNumber = uint256(stakeInfo.stakeAmount);\\n        serialNumber = (serialNumber << 8) | stakeInfo.prediction;\\n    }\\n\\n    /// @dev get current table ID = cumulative days from timestamp 0\\n    function _getCurrentTableId() private view returns (uint256) {\\n        return _getTableId(block.timestamp);\\n    }\\n\\n    /// @dev get table ID given timestamp\\n    function _getTableId(uint256 timestamp) private pure returns (uint256) {\\n        return (timestamp - DAY_TIME_OFFSET) / (1 days);\\n    }\\n}\\n\",\"keccak256\":\"0x7b9bc71a0526db284bc28ec7864dfb8000a97fdde31a3baaa855c6486f4e3d36\",\"license\":\"MIT\"},\"contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Same as openzeppelin one but with uint-to-uint Implementation\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToUint256Map) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index)\\n        private\\n        view\\n        returns (bytes32, bytes32)\\n    {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key)\\n        private\\n        view\\n        returns (bool, bytes32)\\n    {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(\\n            value != 0 || _contains(map, key),\\n            \\\"EnumerableMap: nonexistent key\\\"\\n        );\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // U2UMap\\n\\n    struct U2UMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        U2UMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(U2UMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(U2UMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(U2UMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(U2UMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(U2UMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(U2UMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_get(map._inner, bytes32(key)));\\n    }\\n}\\n\",\"keccak256\":\"0xfc3c6165e8397c16fcba1ffeed5701fefc03590e8843c25385994409cf8259e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051620017ee380380620017ee83398101604081905261003191610060565b6001600160a01b039182166080521660a05261009a565b6001600160a01b038116811461005d57600080fd5b50565b6000806040838503121561007357600080fd5b825161007e81610048565b602084015190925061008f81610048565b809150509250929050565b60805160a051611720620000ce60003960006101f7015260008181610483015281816106710152610b0701526117206000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063833b883611610050578063833b88361461009c57806390dee8dc146100d8578063ba659eef146100f857600080fd5b806311da60b41461007757806345b4dc54146100815780634e71d92d14610094575b600080fd5b61007f610126565b005b61007f61008f366004611310565b61050e565b61007f6108d6565b6100af6100aa36600461137b565b610c2b565b60408051825163ffffffff16815260209283015160ff1692810192909252015b60405180910390f35b6100eb6100e63660046113a5565b610cd8565b6040516100cf91906113ed565b61010b61010636600461147e565b610ddb565b60405169ffffffffffffffffffff90911681526020016100cf565b6000610130610fff565b9050600080806101416001856114c8565b81526020019081526020016000209050600080600060028561016391906114c8565b815260208101919091526040016000208254909150610100900467ffffffffffffffff16156101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f736574746c6520746f6f206561726c790000000000000000000000000000000060448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028491906114f9565b505085547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff8416021786555083549092508291506901000000000000000000900469ffffffffffffffffffff16158061030c57508254730100000000000000000000000000000000000000900469ffffffffffffffffffff16155b1561033f5782547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600317835561040b565b825467ffffffffffffffff610100909104811690821681101561039257835460019085907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682805b0217905550610409565b8067ffffffffffffffff168267ffffffffffffffff1610156103df57835460029085907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183610388565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660031784555b505b8254600090606490610436906901000000000000000000900469ffffffffffffffffffff1680611549565b61044091906115a6565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015269ffffffffffffffffffff821660248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050591906115cf565b50505050505050565b6000610518610fff565b9050624c4b4063ffffffff83161180159061053c5750620f424063ffffffff831610155b6105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f7374616b65206f7574206f662072616e6765000000000000000000000000000060448201526064016101ea565b3360009081526001602052604090206105bb908261100f565b15610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f616c72656164792070726564696374656400000000000000000000000000000060448201526064016101ea565b6000818152602081905260409081902090517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015263ffffffff841660448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f391906115cf565b50831561075c57805463ffffffff841690829060099061072d9084906901000000000000000000900469ffffffffffffffffffff16611549565b92506101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506107c4565b805463ffffffff8416908290601390610799908490730100000000000000000000000000000000000000900469ffffffffffffffffffff16611549565b92506101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055505b6000846107d25760026107d5565b60015b60408051808201825263ffffffff8716815260ff83166020918201819052336000908152600190925291902091925064ffffffff00600887901b16179061081d908583611022565b5082548390601d90610854907d010000000000000000000000000000000000000000000000000000000000900462ffffff166115ec565b91906101000a81548162ffffff021916908362ffffff1602179055508160ff163373ffffffffffffffffffffffffffffffffffffffff167f482085beb79794e6a92b889e5de7cd520e9ed2d390274ac1b8d8c084984b8db1876040516108c6919063ffffffff91909116815260200190565b60405180910390a3505050505050565b336000908152600160205260408120906108ef82611037565b90506000805b82811015610aef5760008061090a8684611042565b60408051808201825260ff83811660208084019190915263ffffffff600886901c168352600086815290819052838120845160a08101909552805496985094965091949193918391166003811115610964576109646113be565b6003811115610975576109756113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529050600381516003811115610a0d57610a0d6113be565b03610a36578151610a249063ffffffff1687611549565b9550610a308885611060565b50610ada565b600081606001518260400151610a4c9190611549565b90506000600183516003811115610a6557610a656113be565b14610a74578260600151610a7a565b82604001515b83519091506003811115610a9057610a906113be565b60ff16846020015160ff1603610ad75783518190610ab590849063ffffffff1661160e565b610abf91906115a6565b610ac99089611549565b9750610ad58a87611060565b505b50505b5050505080610ae890611640565b90506108f5565b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb336064610b3a85606361160e565b610b4491906115a6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015269ffffffffffffffffffff1660248201526044016020604051808303816000875af1158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be491906115cf565b5060405169ffffffffffffffffffff8216815233907fae2a1788f6fac2c97d9bafdb0372f44f842d9f5f3f533b820d2dd66bf45fc3f59060200160405180910390a2505050565b60408051808201909152600080825260208201526000610c4a8361106c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260408120919250908190610c7f9084611088565b915091508115610cb3576040805180820190915260ff82166020820152600882901c63ffffffff1681529350505050610cd2565b505060408051808201909152600080825260208201529150610cd29050565b92915050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290610d0c8361106c565b60008181526020819052604090819020815160a0810190925280549293509091829060ff166003811115610d4257610d426113be565b6003811115610d5357610d536113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812081610e0a82611037565b90506000925060005b81811015610ff757600080610e288584611042565b60408051808201825260ff83811660208084019190915263ffffffff600886901c168352600086815290819052838120845160a08101909552805496985094965091949193918391166003811115610e8257610e826113be565b6003811115610e9357610e936113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529050600381516003811115610f2b57610f2b6113be565b03610f49578151610f429063ffffffff1689611549565b9750610fe2565b600081606001518260400151610f5f9190611549565b90506000600183516003811115610f7857610f786113be565b14610f87578260600151610f8d565b82604001515b83519091506003811115610fa357610fa36113be565b60ff16846020015160ff1603610fdf5783518190610fc890849063ffffffff1661160e565b610fd291906115a6565b610fdc908b611549565b99505b50505b5050505080610ff090611640565b9050610e13565b505050919050565b600061100a4261106c565b905090565b600061101b8383611097565b9392505050565b600061102f8484846110a3565b949350505050565b6000610cd2826110c0565b600080808061105186866110cb565b909450925050505b9250929050565b600061101b83836110f6565b60006201518061107e61b6d0846114c8565b610cd29190611678565b60008080806110518686611113565b600061101b838361114d565b6000828152600284016020526040812082905561102f8484611165565b6000610cd282611171565b600080806110d9858561117b565b600081815260029690960160205260409095205494959350505050565b6000818152600283016020526040812081905561101b8383611187565b6000818152600283016020526040812054819080611142576111358585611097565b9250600091506110599050565b600192509050611059565b6000818152600183016020526040812054151561101b565b600061101b8383611193565b6000610cd2825490565b600061101b83836111e2565b600061101b838361120c565b60008181526001830160205260408120546111da57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cd2565b506000610cd2565b60008260000182815481106111f9576111f961168c565b9060005260206000200154905092915050565b600081815260018301602052604081205480156112f55760006112306001836114c8565b8554909150600090611244906001906114c8565b90508181146112a95760008660000182815481106112645761126461168c565b90600052602060002001549050808760000184815481106112875761128761168c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806112ba576112ba6116bb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610cd2565b6000915050610cd2565b801515811461130d57600080fd5b50565b6000806040838503121561132357600080fd5b823561132e816112ff565b9150602083013563ffffffff8116811461134757600080fd5b809150509250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461137657600080fd5b919050565b6000806040838503121561138e57600080fd5b61139783611352565b946020939093013593505050565b6000602082840312156113b757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815160a08201906004811061142b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8083525067ffffffffffffffff6020840151166020830152604083015169ffffffffffffffffffff8082166040850152806060860151166060850152505062ffffff608084015116608083015292915050565b60006020828403121561149057600080fd5b61101b82611352565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156114da576114da611499565b500390565b805169ffffffffffffffffffff8116811461137657600080fd5b600080600080600060a0868803121561151157600080fd5b61151a866114df565b945060208601519350604086015192506060860151915061153d608087016114df565b90509295509295909350565b600069ffffffffffffffffffff80831681851680830382111561156e5761156e611499565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600069ffffffffffffffffffff808416806115c3576115c3611577565b92169190910492915050565b6000602082840312156115e157600080fd5b815161101b816112ff565b600062ffffff80831681810361160457611604611499565b6001019392505050565b600069ffffffffffffffffffff8083168185168183048111821515161561163757611637611499565b02949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361167157611671611499565b5060010190565b60008261168757611687611577565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220bdbda480e960cba801452dce3dde0c18beae19c988c19a8465a97a7e4c37ed2364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063833b883611610050578063833b88361461009c57806390dee8dc146100d8578063ba659eef146100f857600080fd5b806311da60b41461007757806345b4dc54146100815780634e71d92d14610094575b600080fd5b61007f610126565b005b61007f61008f366004611310565b61050e565b61007f6108d6565b6100af6100aa36600461137b565b610c2b565b60408051825163ffffffff16815260209283015160ff1692810192909252015b60405180910390f35b6100eb6100e63660046113a5565b610cd8565b6040516100cf91906113ed565b61010b61010636600461147e565b610ddb565b60405169ffffffffffffffffffff90911681526020016100cf565b6000610130610fff565b9050600080806101416001856114c8565b81526020019081526020016000209050600080600060028561016391906114c8565b815260208101919091526040016000208254909150610100900467ffffffffffffffff16156101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f736574746c6520746f6f206561726c790000000000000000000000000000000060448201526064015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028491906114f9565b505085547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff8416021786555083549092508291506901000000000000000000900469ffffffffffffffffffff16158061030c57508254730100000000000000000000000000000000000000900469ffffffffffffffffffff16155b1561033f5782547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600317835561040b565b825467ffffffffffffffff610100909104811690821681101561039257835460019085907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682805b0217905550610409565b8067ffffffffffffffff168267ffffffffffffffff1610156103df57835460029085907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183610388565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660031784555b505b8254600090606490610436906901000000000000000000900469ffffffffffffffffffff1680611549565b61044091906115a6565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015269ffffffffffffffffffff821660248201529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050591906115cf565b50505050505050565b6000610518610fff565b9050624c4b4063ffffffff83161180159061053c5750620f424063ffffffff831610155b6105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f7374616b65206f7574206f662072616e6765000000000000000000000000000060448201526064016101ea565b3360009081526001602052604090206105bb908261100f565b15610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f616c72656164792070726564696374656400000000000000000000000000000060448201526064016101ea565b6000818152602081905260409081902090517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015263ffffffff841660448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f391906115cf565b50831561075c57805463ffffffff841690829060099061072d9084906901000000000000000000900469ffffffffffffffffffff16611549565b92506101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506107c4565b805463ffffffff8416908290601390610799908490730100000000000000000000000000000000000000900469ffffffffffffffffffff16611549565b92506101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055505b6000846107d25760026107d5565b60015b60408051808201825263ffffffff8716815260ff83166020918201819052336000908152600190925291902091925064ffffffff00600887901b16179061081d908583611022565b5082548390601d90610854907d010000000000000000000000000000000000000000000000000000000000900462ffffff166115ec565b91906101000a81548162ffffff021916908362ffffff1602179055508160ff163373ffffffffffffffffffffffffffffffffffffffff167f482085beb79794e6a92b889e5de7cd520e9ed2d390274ac1b8d8c084984b8db1876040516108c6919063ffffffff91909116815260200190565b60405180910390a3505050505050565b336000908152600160205260408120906108ef82611037565b90506000805b82811015610aef5760008061090a8684611042565b60408051808201825260ff83811660208084019190915263ffffffff600886901c168352600086815290819052838120845160a08101909552805496985094965091949193918391166003811115610964576109646113be565b6003811115610975576109756113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529050600381516003811115610a0d57610a0d6113be565b03610a36578151610a249063ffffffff1687611549565b9550610a308885611060565b50610ada565b600081606001518260400151610a4c9190611549565b90506000600183516003811115610a6557610a656113be565b14610a74578260600151610a7a565b82604001515b83519091506003811115610a9057610a906113be565b60ff16846020015160ff1603610ad75783518190610ab590849063ffffffff1661160e565b610abf91906115a6565b610ac99089611549565b9750610ad58a87611060565b505b50505b5050505080610ae890611640565b90506108f5565b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb336064610b3a85606361160e565b610b4491906115a6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015269ffffffffffffffffffff1660248201526044016020604051808303816000875af1158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be491906115cf565b5060405169ffffffffffffffffffff8216815233907fae2a1788f6fac2c97d9bafdb0372f44f842d9f5f3f533b820d2dd66bf45fc3f59060200160405180910390a2505050565b60408051808201909152600080825260208201526000610c4a8361106c565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260408120919250908190610c7f9084611088565b915091508115610cb3576040805180820190915260ff82166020820152600882901c63ffffffff1681529350505050610cd2565b505060408051808201909152600080825260208201529150610cd29050565b92915050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290610d0c8361106c565b60008181526020819052604090819020815160a0810190925280549293509091829060ff166003811115610d4257610d426113be565b6003811115610d5357610d536113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812081610e0a82611037565b90506000925060005b81811015610ff757600080610e288584611042565b60408051808201825260ff83811660208084019190915263ffffffff600886901c168352600086815290819052838120845160a08101909552805496985094965091949193918391166003811115610e8257610e826113be565b6003811115610e9357610e936113be565b8152905467ffffffffffffffff610100820416602083015269ffffffffffffffffffff6901000000000000000000820481166040840152730100000000000000000000000000000000000000820416606083015262ffffff7d010000000000000000000000000000000000000000000000000000000000909104166080909101529050600381516003811115610f2b57610f2b6113be565b03610f49578151610f429063ffffffff1689611549565b9750610fe2565b600081606001518260400151610f5f9190611549565b90506000600183516003811115610f7857610f786113be565b14610f87578260600151610f8d565b82604001515b83519091506003811115610fa357610fa36113be565b60ff16846020015160ff1603610fdf5783518190610fc890849063ffffffff1661160e565b610fd291906115a6565b610fdc908b611549565b99505b50505b5050505080610ff090611640565b9050610e13565b505050919050565b600061100a4261106c565b905090565b600061101b8383611097565b9392505050565b600061102f8484846110a3565b949350505050565b6000610cd2826110c0565b600080808061105186866110cb565b909450925050505b9250929050565b600061101b83836110f6565b60006201518061107e61b6d0846114c8565b610cd29190611678565b60008080806110518686611113565b600061101b838361114d565b6000828152600284016020526040812082905561102f8484611165565b6000610cd282611171565b600080806110d9858561117b565b600081815260029690960160205260409095205494959350505050565b6000818152600283016020526040812081905561101b8383611187565b6000818152600283016020526040812054819080611142576111358585611097565b9250600091506110599050565b600192509050611059565b6000818152600183016020526040812054151561101b565b600061101b8383611193565b6000610cd2825490565b600061101b83836111e2565b600061101b838361120c565b60008181526001830160205260408120546111da57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cd2565b506000610cd2565b60008260000182815481106111f9576111f961168c565b9060005260206000200154905092915050565b600081815260018301602052604081205480156112f55760006112306001836114c8565b8554909150600090611244906001906114c8565b90508181146112a95760008660000182815481106112645761126461168c565b90600052602060002001549050808760000184815481106112875761128761168c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806112ba576112ba6116bb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610cd2565b6000915050610cd2565b801515811461130d57600080fd5b50565b6000806040838503121561132357600080fd5b823561132e816112ff565b9150602083013563ffffffff8116811461134757600080fd5b809150509250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461137657600080fd5b919050565b6000806040838503121561138e57600080fd5b61139783611352565b946020939093013593505050565b6000602082840312156113b757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815160a08201906004811061142b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8083525067ffffffffffffffff6020840151166020830152604083015169ffffffffffffffffffff8082166040850152806060860151166060850152505062ffffff608084015116608083015292915050565b60006020828403121561149057600080fd5b61101b82611352565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156114da576114da611499565b500390565b805169ffffffffffffffffffff8116811461137657600080fd5b600080600080600060a0868803121561151157600080fd5b61151a866114df565b945060208601519350604086015192506060860151915061153d608087016114df565b90509295509295909350565b600069ffffffffffffffffffff80831681851680830382111561156e5761156e611499565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600069ffffffffffffffffffff808416806115c3576115c3611577565b92169190910492915050565b6000602082840312156115e157600080fd5b815161101b816112ff565b600062ffffff80831681810361160457611604611499565b6001019392505050565b600069ffffffffffffffffffff8083168185168183048111821515161561163757611637611499565b02949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361167157611671611499565b5060010190565b60008261168757611687611577565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220bdbda480e960cba801452dce3dde0c18beae19c988c19a8465a97a7e4c37ed2364736f6c634300080d0033",
  "devdoc": {
    "author": "InJoy Labs (https://injoylabs.io/)",
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Claim reward given table IDs"
      },
      "constructor": {
        "details": "Connect USDT contract and BTC oracle"
      },
      "getPlayerStakeInfo(address,uint256)": {
        "details": "get current stake info of certain player"
      },
      "getPlayerUnclaimReward(address)": {
        "details": "compute unclaimed reward of certain player"
      },
      "getTableInfo(uint256)": {
        "details": "get current stake for long and short"
      },
      "predict(bool,uint32)": {
        "details": "Predict BTC price with certain amount of USDT"
      },
      "settle()": {
        "details": "Settle the result using Chainlink oracle"
      }
    },
    "stateVariables": {
      "_btcPriceFeed": {
        "details": "Chainlink BTC price feed oracle"
      },
      "_stakeInfoMapOf": {
        "details": "Player => (TableID => StakeInfo)"
      },
      "_tableInfoMap": {
        "details": "TableID => TableInfo"
      },
      "_usdt": {
        "details": "USDT contract"
      }
    },
    "title": "A game about predicting the price of BTC",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 795,
        "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
        "label": "_tableInfoMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(TableInfo)767_storage)"
      },
      {
        "astId": 801,
        "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
        "label": "_stakeInfoMapOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(U2UMap)1726_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TableResult)755": {
        "encoding": "inplace",
        "label": "enum EnJoyPrediction.TableResult",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(U2UMap)1726_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.U2UMap)",
        "numberOfBytes": "32",
        "value": "t_struct(U2UMap)1726_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TableInfo)767_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnJoyPrediction.TableInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TableInfo)767_storage"
      },
      "t_struct(Bytes32Set)328_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 327,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)134_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)1496_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 1491,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)328_storage"
          },
          {
            "astId": 1495,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)134_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 129,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 133,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TableInfo)767_storage": {
        "encoding": "inplace",
        "label": "struct EnJoyPrediction.TableInfo",
        "members": [
          {
            "astId": 758,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "result",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TableResult)755"
          },
          {
            "astId": 760,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "startPrice",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 762,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "longPool",
            "offset": 9,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 764,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "shortPool",
            "offset": 19,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 766,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "playerCount",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(U2UMap)1726_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.U2UMap",
        "members": [
          {
            "astId": 1725,
            "contract": "contracts/EnJoyPrediction.sol:EnJoyPrediction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)1496_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}