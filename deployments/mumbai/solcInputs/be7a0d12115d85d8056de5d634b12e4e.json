{
  "language": "Solidity",
  "sources": {
    "contracts/EnJoyPrediction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./utils/EnumerableMap.sol\";\n\n/**\n * @author InJoy Labs (https://injoylabs.io/)\n * @title A game about predicting the price of BTC\n */\ncontract EnJoyPrediction {\n    // uint-to-uint enumerable map\n    using EnumerableMap for EnumerableMap.U2UMap;\n\n    uint32 private constant MIN_STAKE = 1_000_000; // 1 USDT\n\n    uint32 private constant MAX_STAKE = 5_000_000; // 5 USDT\n\n    uint32 private constant DAY_TIME_OFFSET = 11 * 60 * 60; // 7 p.m. UTC+8\n\n    /// @dev Player's stake info given table\n    struct StakeInfo {\n        uint32 stakeAmount;\n        uint8 prediction;\n    }\n\n    /// @dev Table result state\n    enum TableResult {\n        NULL,\n        LONG,\n        SHORT,\n        DRAW\n    }\n\n    /// @dev Table's info given table ID (global storage)\n    struct TableInfo {\n        TableResult result;\n        uint64 startPrice;\n        uint80 longPool;\n        uint80 shortPool;\n        uint24 playerCount;\n    }\n\n    /// @dev USDT contract\n    IERC20 private immutable _usdt;\n\n    /// @dev Chainlink BTC price feed oracle\n    AggregatorV3Interface private immutable _btcPriceFeed;\n\n    /// @dev Player => (TableID => StakeInfo)\n    mapping(address => EnumerableMap.U2UMap) private _stakeInfoMapOf;\n\n    /// @dev TableID => TableInfo\n    mapping(uint256 => TableInfo) private _tableInfoMap;\n\n    /// @dev Connect USDT contract and BTC oracle\n    constructor(IERC20 usdtAddress, AggregatorV3Interface btcAggregator) {\n        _usdt = usdtAddress;\n        _btcPriceFeed = btcAggregator;\n    }\n\n    /**\n     * Execution Functions\n     */\n\n    /// @dev Predict BTC price with certain amount of USDT\n    function predict(bool predictLong, uint32 stakeAmount) public {\n        uint256 tableId = _getCurrentTableId();\n        // checks\n        require(\n            stakeAmount <= MAX_STAKE && stakeAmount >= MIN_STAKE,\n            \"stake out of range\"\n        );\n        require(\n            !_stakeInfoMapOf[msg.sender].contains(tableId),\n            \"already predicted\"\n        );\n\n        // get current table info\n        TableInfo storage tableInfo = _tableInfoMap[tableId];\n\n        // stake USDT to contract\n        _usdt.transferFrom(msg.sender, address(this), stakeAmount);\n\n        // update table info\n        if (predictLong) tableInfo.longPool += stakeAmount;\n        else tableInfo.shortPool += stakeAmount;\n\n        // add stake info to player's profolio\n        uint256 serialNumber = _serializeStakeInfo(\n            StakeInfo(\n                stakeAmount,\n                predictLong ? uint8(TableResult.LONG) : uint8(TableResult.SHORT)\n            )\n        );\n        _stakeInfoMapOf[msg.sender].set(tableId, serialNumber);\n\n        // increase player count by one\n        ++tableInfo.playerCount;\n    }\n\n    /// @dev Claim reward given table IDs\n    function claim() public {\n        EnumerableMap.U2UMap storage stakeInfoMap = _stakeInfoMapOf[msg.sender];\n        uint256 mapSize = stakeInfoMap.length();\n        uint80 claimableReward = 0;\n        for (uint256 i = 0; i < mapSize; ++i) {\n            (uint256 tableId, uint256 serialNumber) = stakeInfoMap.at(i);\n            StakeInfo memory stakeInfo = _deserializeStakeInfo(serialNumber);\n            TableInfo memory tableInfo = _tableInfoMap[tableId];\n            if (tableInfo.result == TableResult.DRAW) {\n                claimableReward += stakeInfo.stakeAmount;\n                stakeInfoMap.remove(tableId);\n            } else {\n                uint80 pool = tableInfo.longPool + tableInfo.shortPool;\n                uint80 shares = tableInfo.result == TableResult.LONG\n                    ? tableInfo.longPool\n                    : tableInfo.shortPool;\n                if (stakeInfo.prediction == uint8(tableInfo.result)) {\n                    claimableReward += (stakeInfo.stakeAmount * pool) / shares;\n                    stakeInfoMap.remove(tableId);\n                }\n            }\n        }\n\n        // transfer reward to player\n        _usdt.transfer(msg.sender, (claimableReward * 99) / 100);\n    }\n\n    /// @dev Settle the result using Chainlink oracle\n    function settle() public {\n        uint256 tableId = _getCurrentTableId();\n        TableInfo storage currentTableInfo = _tableInfoMap[tableId];\n        TableInfo storage waitingTableInfo = _tableInfoMap[tableId - 2];\n\n        // check if current table has already created\n        require(currentTableInfo.startPrice == 0, \"settle too early\");\n\n        // fetch BTC price from Chainlink oracle\n        (, int256 price, , , ) = _btcPriceFeed.latestRoundData();\n        uint64 currPrice = uint64(uint256(price));\n\n        // set the start price of current table\n        currentTableInfo.startPrice = currPrice;\n\n        // settle the result of waiting table\n        if (waitingTableInfo.longPool == 0 || waitingTableInfo.shortPool == 0) {\n            waitingTableInfo.result = TableResult.DRAW;\n        } else {\n            uint64 previousStartPrice = waitingTableInfo.startPrice;\n            if (currPrice > previousStartPrice) {\n                waitingTableInfo.result = TableResult.LONG;\n            } else if (currPrice < previousStartPrice) {\n                waitingTableInfo.result = TableResult.SHORT;\n            } else {\n                waitingTableInfo.result = TableResult.DRAW;\n            }\n        }\n\n        // transfer reward to settler to covering the gas fee\n        uint80 reward = (waitingTableInfo.longPool +\n            waitingTableInfo.longPool) / 100;\n        _usdt.transfer(msg.sender, reward);\n    }\n\n    /**\n     * Query Functions\n     */\n\n    /// @dev compute unclaimed reward of certain player\n    function getPlayerUnclaimReward(address player)\n        public\n        view\n        returns (uint80 claimableReward)\n    {\n        EnumerableMap.U2UMap storage stakeInfoMap = _stakeInfoMapOf[player];\n        uint256 mapSize = stakeInfoMap.length();\n        claimableReward = 0;\n        for (uint256 i = 0; i < mapSize; ++i) {\n            (uint256 tableId, uint256 serialNumber) = stakeInfoMap.at(i);\n            StakeInfo memory stakeInfo = _deserializeStakeInfo(serialNumber);\n            TableInfo memory tableInfo = _tableInfoMap[tableId];\n            if (tableInfo.result == TableResult.DRAW) {\n                claimableReward += stakeInfo.stakeAmount;\n            } else {\n                uint80 pool = tableInfo.longPool + tableInfo.shortPool;\n                uint80 shares = tableInfo.result == TableResult.LONG\n                    ? tableInfo.longPool\n                    : tableInfo.shortPool;\n                if (stakeInfo.prediction == uint8(tableInfo.result))\n                    claimableReward += (stakeInfo.stakeAmount * pool) / shares;\n            }\n        }\n    }\n\n    /// @dev get current stake for long and short\n    function getTableInfo(uint256 timestamp)\n        public\n        view\n        returns (TableInfo memory)\n    {\n        uint256 tableId = _getTableId(timestamp);\n        return _tableInfoMap[tableId];\n    }\n\n    /// @dev get current stake info of certain player\n    function getPlayerStakeInfo(address player, uint256 timestamp)\n        public\n        view\n        returns (StakeInfo memory)\n    {\n        uint256 tableId = _getTableId(timestamp);\n        (bool ifPredicted, uint256 serialNumber) = _stakeInfoMapOf[player]\n            .tryGet(tableId);\n        // return stake info if predicted\n        if (ifPredicted) {\n            return _deserializeStakeInfo(serialNumber);\n        } else {\n            return StakeInfo(0, 0);\n        }\n    }\n\n    /// @dev deserialize uint256 to StakeInfo struct\n    function _deserializeStakeInfo(uint256 serialNumber)\n        private\n        pure\n        returns (StakeInfo memory stakeInfo)\n    {\n        stakeInfo.prediction = uint8(serialNumber);\n        serialNumber >>= 8;\n        stakeInfo.stakeAmount = uint32(serialNumber);\n    }\n\n    /// @dev serialize StakeInfo struct into uint256\n    function _serializeStakeInfo(StakeInfo memory stakeInfo)\n        private\n        pure\n        returns (uint256 serialNumber)\n    {\n        serialNumber = uint256(stakeInfo.stakeAmount);\n        serialNumber = (serialNumber << 8) | stakeInfo.prediction;\n    }\n\n    /// @dev get current table ID = cumulative days from timestamp 0\n    function _getCurrentTableId() private view returns (uint256) {\n        return _getTableId(block.timestamp);\n    }\n\n    /// @dev get table ID given timestamp\n    function _getTableId(uint256 timestamp) private pure returns (uint256) {\n        return (timestamp - DAY_TIME_OFFSET) / (1 days);\n    }\n}\n"
    },
    "contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Same as openzeppelin one but with uint-to-uint Implementation\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToUint256Map) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key)\n        private\n        view\n        returns (bool)\n    {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index)\n        private\n        view\n        returns (bytes32, bytes32)\n    {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key)\n        private\n        view\n        returns (bool, bytes32)\n    {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(\n            value != 0 || _contains(map, key),\n            \"EnumerableMap: nonexistent key\"\n        );\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // U2UMap\n\n    struct U2UMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        U2UMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(U2UMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(U2UMap storage map, uint256 key)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(U2UMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(U2UMap storage map, uint256 index)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(U2UMap storage map, uint256 key)\n        internal\n        view\n        returns (bool, uint256)\n    {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(U2UMap storage map, uint256 key)\n        internal\n        view\n        returns (uint256)\n    {\n        return uint256(_get(map._inner, bytes32(key)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}